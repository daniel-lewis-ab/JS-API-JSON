[
  {
    "name": "String()",
    "description": "Creates a new String object. It performs type conversion when called as\n      a function, rather than as a constructor, which is usually more useful.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String",
    "return_value": "When String is called as a constructor (with new), it creates a String object, which is not a primitive.\nWhen String is called as a function, it coerces the parameter to a string primitive. Symbol values would be converted to \"Symbol(description)\", where description is the description of the Symbol, instead of throwing.\n\nWarning: You should rarely find yourself using String as a constructor.",
    "parameters": [
      {
        "name": "thing",
        "optional": false,
        "description": "Anything to be converted to a string."
      }
    ]
  },
  {
    "name": "String.fromCharCode()",
    "description": "Returns a string created by using the specified sequence of Unicode values.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode",
    "return_value": "A string of length N consisting of the N specified UTF-16 code units.",
    "parameters": [
      {
        "name": "num1",
        "optional": false,
        "description": "A number between 0 and 65535 (0xFFFF) representing a UTF-16 code unit. Numbers greater than 0xFFFF are truncated to the last 16 bits. No validity checks are performed."
      }
    ]
  },
  {
    "name": "String.fromCodePoint()",
    "description": "Returns a string created by using the specified sequence of code points.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint",
    "return_value": "A string created by using the specified sequence of code points.",
    "parameters": [
      {
        "name": "num1",
        "optional": false,
        "description": "An integer between 0 and 0x10FFFF (inclusive) representing a Unicode code point."
      },
      {
        "name": "RangeError",
        "optional": false,
        "description": "Thrown if numN is not an integer, is less than 0, or is greater than 0x10FFFF after being converted to a number."
      }
    ]
  },
  {
    "name": "String.raw()",
    "description": "Returns a string created from a raw template string.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw",
    "return_value": "The raw string form of a given template literal.",
    "parameters": [
      {
        "name": "strings",
        "optional": false,
        "description": "Well-formed template literal array object, like { raw: ['foo', 'bar', 'baz'] }. Should be an object with a raw property whose value is an array-like object of strings."
      },
      {
        "name": "sub1",
        "optional": false,
        "description": "Contains substitution values."
      },
      {
        "name": "templateString",
        "optional": false,
        "description": "A template literal, optionally with substitutions (${...})."
      },
      {
        "name": "TypeError",
        "optional": false,
        "description": "Thrown if the first argument doesn't have a raw property, or the raw property is undefined or null."
      }
    ]
  },
  {
    "name": "String.prototype.constructor",
    "description": "The constructor function that created the instance object. For String instances, the initial value is the String constructor.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor",
    "parameters": []
  },
  {
    "name": "length",
    "description": "Reflects the length of the string. Read-only.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length",
    "parameters": []
  },
  {
    "name": "String.prototype.at()",
    "description": "Returns the character (exactly one UTF-16 code unit) at the specified index. Accepts negative integers, which count back from the last string character.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at",
    "return_value": "A String consisting of the single UTF-16 code unit located at the specified position. Returns undefined if the given index can not be found.",
    "parameters": [
      {
        "name": "index",
        "optional": false,
        "description": "The index (position) of the string character to be returned. Supports relative indexing from the end of the string when passed a negative index; i.e. if a negative number is used, the character returned will be found by counting back from the end of the string."
      }
    ]
  },
  {
    "name": "String.prototype.charAt()",
    "description": "Returns the character (exactly one UTF-16 code unit) at the specified\n      index.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt",
    "return_value": "A string representing the character (exactly one UTF-16 code unit) at the specified index. If index is out of the range of 0 \u00e2\u0080\u0093 str.length - 1, charAt() returns an empty string.",
    "parameters": [
      {
        "name": "index",
        "optional": false,
        "description": "Zero-based index of the character to be returned. Converted to an integer \u00e2\u0080\u0094 undefined is converted to 0."
      }
    ]
  },
  {
    "name": "String.prototype.charCodeAt()",
    "description": "Returns a number that is the UTF-16 code unit value at the given\n      index.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt",
    "return_value": "An integer between 0 and 65535 representing the UTF-16 code unit value of the character at the specified index. If index is out of range of 0 \u00e2\u0080\u0093 str.length - 1, charCodeAt() returns NaN.",
    "parameters": [
      {
        "name": "index",
        "optional": false,
        "description": "Zero-based index of the character to be returned. Converted to an integer \u00e2\u0080\u0094 undefined is converted to 0."
      }
    ]
  },
  {
    "name": "String.prototype.codePointAt()",
    "description": "Returns a nonnegative integer Number that is the code point value of the UTF-16\n      encoded code point starting at the specified pos.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt",
    "return_value": "A non-negative integer representing the code point value of the character at the given index.\n\nIf index is out of the range of 0 \u00e2\u0080\u0093 str.length - 1, codePointAt() returns undefined.\nIf the element at index is a UTF-16 leading surrogate, returns the code point of the surrogate pair.\nIf the element at index is a UTF-16 trailing surrogate, returns only the trailing surrogate code unit.",
    "parameters": [
      {
        "name": "index",
        "optional": false,
        "description": "Zero-based index of the character to be returned. Converted to an integer \u00e2\u0080\u0094 undefined is converted to 0."
      }
    ]
  },
  {
    "name": "String.prototype.concat()",
    "description": "Combines the text of two (or more) strings and returns a new string.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat",
    "return_value": "A new string containing the combined text of the strings provided.",
    "parameters": [
      {
        "name": "str1",
        "optional": false,
        "description": "One or more strings to concatenate to str."
      }
    ]
  },
  {
    "name": "String.prototype.endsWith()",
    "description": "Determines whether a string ends with the characters of the string\n      searchString.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith",
    "return_value": "true if the given characters are found at the end of the string, including when searchString is an empty string; otherwise, false.",
    "parameters": [
      {
        "name": "searchString",
        "optional": false,
        "description": "The characters to be searched for at the end of str. Cannot be a regex. All values that are not regexes are coerced to strings, so omitting it or passing undefined causes endsWith() to search for the string \"undefined\", which is rarely what you want."
      },
      {
        "name": "endPosition",
        "optional": true,
        "description": "The end position at which searchString is expected to be found (the index of searchString's last character plus 1). Defaults to str.length."
      },
      {
        "name": "TypeError",
        "optional": false,
        "description": "Thrown if searchString is a regex."
      }
    ]
  },
  {
    "name": "String.prototype.includes()",
    "description": "Determines whether the calling string contains searchString.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes",
    "return_value": "true if the search string is found anywhere within the given string, including when searchString is an empty string; otherwise, false.",
    "parameters": [
      {
        "name": "searchString",
        "optional": false,
        "description": "A string to be searched for within str. Cannot be a regex. All values that are not regexes are coerced to strings, so omitting it or passing undefined causes includes() to search for the string \"undefined\", which is rarely what you want."
      },
      {
        "name": "position",
        "optional": true,
        "description": "The position within the string at which to begin searching for searchString. (Defaults to 0.)"
      },
      {
        "name": "TypeError",
        "optional": false,
        "description": "Thrown if searchString is a regex."
      }
    ]
  },
  {
    "name": "String.prototype.indexOf()",
    "description": "Returns the index within the calling String object of the first\n      occurrence of searchValue, or -1 if not found.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf",
    "return_value": "The index of the first occurrence of searchString found, or -1 if not found.\nReturn value when using an empty search string\nSearching for an empty search string produces strange results. With no second argument, or with a second argument whose value is less than the calling string's length, the return value is the same as the value of the second argument:\njs\"hello world\".indexOf(\"\"); // returns 0\n\"hello world\".indexOf(\"\", 0); // returns 0\n\"hello world\".indexOf(\"\", 3); // returns 3\n\"hello world\".indexOf(\"\", 8); // returns 8\n\nHowever, with a second argument whose value is greater than or equal to the string's length, the return value is the string's length:\njs\"hello world\".indexOf(\"\", 11); // returns 11\n\"hello world\".indexOf(\"\", 13); // returns 11\n\"hello world\".indexOf(\"\", 22); // returns 11\n\nIn the former instance, the method behaves as if it found an empty string just after the position specified in the second argument. In the latter instance, the method behaves as if it found an empty string at the end of the calling string.",
    "parameters": [
      {
        "name": "searchString",
        "optional": false,
        "description": "Substring to search for. All values are coerced to strings, so omitting it or passing undefined causes indexOf() to search for the string \"undefined\", which is rarely what you want."
      },
      {
        "name": "position",
        "optional": true,
        "description": "The method returns the index of the first occurrence of the specified substring at a position greater than or equal to position, which defaults to 0. If position is greater than the length of the calling string, the method doesn't search the calling string at all. If position is less than zero, the method behaves as it would if position were 0.\n\n'hello world hello'.indexOf('o', -5) returns 4 \u00e2\u0080\u0094 because it causes the method to behave as if the second argument were 0, and the first occurrence of o at a position greater or equal to 0 is at position 4.\n'hello world hello'.indexOf('world', 12) returns -1 \u00e2\u0080\u0094 because, while it's true the substring world occurs at index 6, that position is not greater than or equal to 12.\n'hello world hello'.indexOf('o', 99) returns -1 \u00e2\u0080\u0094 because 99 is greater than the length of hello world hello, which causes the method to not search the string at all."
      }
    ]
  },
  {
    "name": "String.prototype.isWellFormed()",
    "description": "Returns a boolean indicating whether this string contains any lone surrogates.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/isWellFormed",
    "return_value": "Returns true if this string does not contain any lone surrogates, false otherwise.",
    "parameters": []
  },
  {
    "name": "String.prototype.lastIndexOf()",
    "description": "Returns the index within the calling String object of the last\n      occurrence of searchValue, or -1 if not found.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf",
    "return_value": "The index of the last occurrence of searchString found, or -1 if not found.",
    "parameters": [
      {
        "name": "searchString",
        "optional": false,
        "description": "Substring to search for. All values are coerced to strings, so omitting it or passing undefined causes lastIndexOf() to search for the string \"undefined\", which is rarely what you want."
      },
      {
        "name": "position",
        "optional": true,
        "description": "The method returns the index of the last occurrence of the specified substring at a position less than or equal to position, which defaults to +Infinity. If position is greater than the length of the calling string, the method searches the entire string. If position is less than 0, the behavior is the same as for 0 \u00e2\u0080\u0094 that is, the method looks for the specified substring only at index 0.\n\n'hello world hello'.lastIndexOf('world', 4) returns -1 \u00e2\u0080\u0094 because, while the substring world does occurs at index 6, that position is not less than or equal to 4.\n'hello world hello'.lastIndexOf('hello', 99) returns 12 \u00e2\u0080\u0094 because the last occurrence of hello at a position less than or equal to 99 is at position 12.\n'hello world hello'.lastIndexOf('hello', 0) and 'hello world hello'.lastIndexOf('hello', -5) both return 0 \u00e2\u0080\u0094 because both cause the method to only look for hello at index 0."
      }
    ]
  },
  {
    "name": "String.prototype.localeCompare()",
    "description": "Returns a number indicating whether the reference string\n      compareString comes before, after, or is equivalent to the\n      given string in sort order.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare",
    "return_value": "A negative number if referenceStr occurs before compareString; positive if the referenceStr occurs after compareString; 0 if they are equivalent.\nIn implementations with Intl.Collator, this is equivalent to new Intl.Collator(locales, options).compare(referenceStr, compareString).",
    "parameters": [
      {
        "name": "compareString",
        "optional": false,
        "description": "The string against which the referenceStr is compared. All values are coerced to strings, so omitting it or passing undefined causes localeCompare() to compare against the string \"undefined\", which is rarely what you want."
      },
      {
        "name": "locales",
        "optional": true,
        "description": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the locales parameter of the Intl.Collator() constructor.\nIn implementations without Intl.Collator support, this parameter is ignored and the host's locale is usually used."
      },
      {
        "name": "options",
        "optional": true,
        "description": "An object adjusting the output format. Corresponds to the options parameter of the Intl.Collator() constructor.\nIn implementations without Intl.Collator support, this parameter is ignored."
      }
    ]
  },
  {
    "name": "String.prototype.match()",
    "description": "Used to match regular expression regexp against a string.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match",
    "return_value": "An Array whose contents depend on the presence or absence of the global (g) flag, or null if no matches are found.\n\nIf the g flag is used, all results matching the complete regular expression will be returned, but capturing groups are not included.\nIf the g flag is not used, only the first complete match and its related capturing groups are returned. In this case, match() will return the same result as RegExp.prototype.exec() (an array with some extra properties).",
    "parameters": [
      {
        "name": "regexp",
        "optional": false,
        "description": "A regular expression object, or any object that has a Symbol.match method.\nIf regexp is not a RegExp object and does not have a Symbol.match method, it is implicitly converted to a RegExp by using new RegExp(regexp).\nIf you don't give any parameter and use the match() method directly, you will get an Array with an empty string: [\"\"], because this is equivalent to match(/(?:)/)."
      }
    ]
  },
  {
    "name": "String.prototype.matchAll()",
    "description": "Returns an iterator of all regexp's matches.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll",
    "return_value": "An iterable iterator object (which is not restartable) of matches or an empty iterator if no matches are found. Each value yielded by the iterator is an array with the same shape as the return value of RegExp.prototype.exec().",
    "parameters": [
      {
        "name": "regexp",
        "optional": false,
        "description": "A regular expression object, or any object that has a Symbol.matchAll method.\nIf regexp is not a RegExp object and does not have a Symbol.matchAll method, it is implicitly converted to a RegExp by using new RegExp(regexp, 'g').\nIf regexp is a regex, then it must have the global (g) flag set, or a TypeError is thrown."
      },
      {
        "name": "TypeError",
        "optional": false,
        "description": "Thrown if the regexp is a regex that does not have the global (g) flag set (its flags property does not contain \"g\")."
      }
    ]
  },
  {
    "name": "String.prototype.normalize()",
    "description": "Returns the Unicode Normalization Form of the calling string value.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize",
    "return_value": "A string containing the Unicode Normalization Form of the given string.",
    "parameters": [
      {
        "name": "form",
        "optional": true,
        "description": "One of \"NFC\", \"NFD\", \"NFKC\", or\n      \"NFKD\", specifying the Unicode Normalization Form. If omitted or\n      undefined, \"NFC\" is used.\n    \nThese values have the following meanings:\n\n\"NFC\"\n\nCanonical Decomposition, followed by Canonical Composition.\n\n\"NFD\"\n\nCanonical Decomposition.\n\n\"NFKC\"\n\nCompatibility Decomposition, followed by Canonical Composition.\n\n\"NFKD\"\n\nCompatibility Decomposition."
      },
      {
        "name": "\"NFC\"",
        "optional": false,
        "description": "Canonical Decomposition, followed by Canonical Composition."
      },
      {
        "name": "\"NFD\"",
        "optional": false,
        "description": "Canonical Decomposition."
      },
      {
        "name": "\"NFKC\"",
        "optional": false,
        "description": "Compatibility Decomposition, followed by Canonical Composition."
      },
      {
        "name": "\"NFKD\"",
        "optional": false,
        "description": "Compatibility Decomposition."
      },
      {
        "name": "RangeError",
        "optional": false,
        "description": "Thrown if form isn't one of the values\n      specified above."
      }
    ]
  },
  {
    "name": "String.prototype.padEnd()",
    "description": "Pads the current string from the end with a given string and returns a new string of\n      the length targetLength.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd",
    "return_value": "A String of the specified targetLength with the\n  padString applied at the end of the current\n  str.",
    "parameters": [
      {
        "name": "targetLength",
        "optional": false,
        "description": "The length of the resulting string once the current str has\n      been padded. If the value is less than or equal to str.length, the\n      current string will be returned as-is."
      },
      {
        "name": "padString",
        "optional": true,
        "description": "The string to pad the current str with. If\n      padString is too long to stay within\n      targetLength, it will be truncated: for left-to-right\n      languages the left-most part and for right-to-left languages the right-most will be\n      applied. The default value for this parameter is \" \"\n      (U+0020)."
      }
    ]
  },
  {
    "name": "String.prototype.padStart()",
    "description": "Pads the current string from the start with a given string and returns a new string\n      of the length targetLength.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart",
    "return_value": "A String of the specified targetLength with\n  padString applied from the start.",
    "parameters": [
      {
        "name": "targetLength",
        "optional": false,
        "description": "The length of the resulting string once the current str has\n      been padded. If the value is less than or equal to str.length, then\n      str is returned as-is."
      },
      {
        "name": "padString",
        "optional": true,
        "description": "The string to pad the current str with. If\n      padString is too long to stay within the\n      targetLength, it will be truncated from the end.\n      The default value is the unicode \"space\" character (U+0020)."
      }
    ]
  },
  {
    "name": "String.prototype.repeat()",
    "description": "Returns a string consisting of the elements of the object repeated\n      count times.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat",
    "return_value": "A new string containing the specified number of copies of the given string.",
    "parameters": [
      {
        "name": "count",
        "optional": false,
        "description": "An integer between 0 and\n      +Infinity, indicating the\n      number of times to repeat the string."
      },
      {
        "name": "RangeError",
        "optional": false,
        "description": "Thrown if count is negative or if count overflows maximum string length."
      }
    ]
  },
  {
    "name": "String.prototype.replace()",
    "description": "Used to replace occurrences of searchFor using\n      replaceWith. searchFor may be a string\n      or Regular Expression, and replaceWith may be a string or\n      function.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace",
    "return_value": "A new string, with one, some, or all matches of the pattern replaced by the specified replacement.",
    "parameters": [
      {
        "name": "pattern",
        "optional": false,
        "description": "Can be a string or an object with a Symbol.replace method \u00e2\u0080\u0094 the typical example being a regular expression. Any value that doesn't have the Symbol.replace method will be coerced to a string."
      },
      {
        "name": "replacement",
        "optional": false,
        "description": "Can be a string or a function.\n\nIf it's a string, it will replace the substring matched by pattern. A number of special replacement patterns are supported; see the Specifying a string as the replacement section below.\nIf it's a function, it will be invoked for every match and its return value is used as the replacement text. The arguments supplied to this function are described in the Specifying a function as the replacement section below."
      },
      {
        "name": "match",
        "optional": false,
        "description": "The matched substring. (Corresponds to $& above.)"
      },
      {
        "name": "p1, p2, \u00e2\u0080\u00a6, pN",
        "optional": false,
        "description": "The nth string found by a capture group (including named capturing groups), provided the first argument to replace() is a RegExp object. (Corresponds to $1, $2, etc. above.) For example, if the pattern is /(\\a+)(\\b+)/, then p1 is the match for \\a+, and p2 is the match for \\b+. If the group is part of a disjunction (e.g. \"abc\".replace(/(a)|(b)/, replacer)), the unmatched alternative will be undefined."
      },
      {
        "name": "offset",
        "optional": false,
        "description": "The offset of the matched substring within the whole string being examined. For example, if the whole string was 'abcd', and the matched substring was 'bc', then this argument will be 1."
      },
      {
        "name": "string",
        "optional": false,
        "description": "The whole string being examined."
      },
      {
        "name": "groups",
        "optional": false,
        "description": "An object whose keys are the used group names, and whose values are the matched portions (undefined if not matched). Only present if the pattern contains at least one named capturing group."
      }
    ]
  },
  {
    "name": "String.prototype.replaceAll()",
    "description": "Used to replace all occurrences of searchFor using\n      replaceWith. searchFor may be a string\n      or Regular Expression, and replaceWith may be a string or\n      function.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll",
    "return_value": "A new string, with all matches of a pattern replaced by a replacement.",
    "parameters": [
      {
        "name": "pattern",
        "optional": false,
        "description": "Can be a string or an object with a Symbol.replace method \u00e2\u0080\u0094 the typical example being a regular expression. Any value that doesn't have the Symbol.replace method will be coerced to a string.\nIf pattern is a regex, then it must have the global (g) flag set, or a TypeError is thrown."
      },
      {
        "name": "replacement",
        "optional": false,
        "description": "Can be a string or a function. The replacement has the same semantics as that of String.prototype.replace()."
      },
      {
        "name": "TypeError",
        "optional": false,
        "description": "Thrown if the pattern is a regex that does not have the global (g) flag set (its flags property does not contain \"g\")."
      }
    ]
  },
  {
    "name": "String.prototype.search()",
    "description": "Search for a match between a regular expression regexp and\n      the calling string.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search",
    "return_value": "The index of the first match between the regular expression and the given string, or -1 if no match was found.",
    "parameters": [
      {
        "name": "regexp",
        "optional": false,
        "description": "A regular expression object, or any object that has a Symbol.search method.\nIf regexp is not a RegExp object and does not have a Symbol.search method, it is implicitly converted to a RegExp by using new RegExp(regexp)."
      }
    ]
  },
  {
    "name": "String.prototype.slice()",
    "description": "Extracts a section of a string and returns a new string.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice",
    "return_value": "A new string containing the extracted section of the string.",
    "parameters": [
      {
        "name": "indexStart",
        "optional": false,
        "description": "The index of the first character to include in the returned substring."
      },
      {
        "name": "indexEnd",
        "optional": true,
        "description": "The index of the first character to exclude from the returned substring."
      }
    ]
  },
  {
    "name": "String.prototype.split()",
    "description": "Returns an array of strings populated by splitting the calling string at occurrences\n      of the substring sep.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split",
    "return_value": "An Array of strings, split at each point where the separator occurs in the given string.",
    "parameters": [
      {
        "name": "separator",
        "optional": false,
        "description": "The pattern describing where each split should occur. Can be undefined, a string, or an object with a Symbol.split method \u00e2\u0080\u0094 the typical example being a regular expression. Omitting separator or passing undefined causes split() to return an array with the calling string as a single element. All values that are not undefined or objects with a @@split method are coerced to strings."
      },
      {
        "name": "limit",
        "optional": true,
        "description": "A non-negative integer specifying a limit on the number of substrings to be included in the array. If provided, splits the string at each occurrence of the specified separator, but stops when limit entries have been placed in the array. Any leftover text is not included in the array at all.\n\nThe array may contain fewer entries than limit if the end of the string is reached before the limit is reached.\nIf limit is 0, [] is returned."
      }
    ]
  },
  {
    "name": "String.prototype.startsWith()",
    "description": "Determines whether the calling string begins with the characters of string\n      searchString.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith",
    "return_value": "true if the given characters are found at the beginning of the string, including when searchString is an empty string; otherwise, false.",
    "parameters": [
      {
        "name": "searchString",
        "optional": false,
        "description": "The characters to be searched for at the start of this string. Cannot be a regex. All values that are not regexes are coerced to strings, so omitting it or passing undefined causes startsWith() to search for the string \"undefined\", which is rarely what you want."
      },
      {
        "name": "position",
        "optional": true,
        "description": "The start position at which searchString is expected to be found (the index of searchString's first character). Defaults to 0."
      },
      {
        "name": "TypeError",
        "optional": false,
        "description": "Thrown if searchString is a regex."
      }
    ]
  },
  {
    "name": "String.prototype.substr()",
    "description": "Returns a portion of the string, starting at the specified index and extending for a given number of characters afterwards.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr",
    "return_value": "A new string containing the specified part of the given string.",
    "parameters": [
      {
        "name": "start",
        "optional": false,
        "description": "The index of the first character to include in the returned substring."
      },
      {
        "name": "length",
        "optional": true,
        "description": "The number of characters to extract."
      }
    ]
  },
  {
    "name": "String.prototype.substring()",
    "description": "Returns a new string containing characters of the calling string from (or between)\n      the specified index (or indices).",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring",
    "return_value": "A new string containing the specified part of the given string.",
    "parameters": [
      {
        "name": "indexStart",
        "optional": false,
        "description": "The index of the first character to include in the returned substring."
      },
      {
        "name": "indexEnd",
        "optional": true,
        "description": "The index of the first character to exclude from the returned substring."
      }
    ]
  },
  {
    "name": "String.prototype.toLocaleLowerCase()",
    "description": "The characters within a string are converted to lowercase while respecting the\n      current locale.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase",
    "return_value": "A new string representing the calling string converted to lower case, according to any\n  locale-specific case mappings.",
    "parameters": [
      {
        "name": "locales",
        "optional": true,
        "description": "A string with a BCP 47 language tag, or an array of such strings. Indicates the locale to be used to convert to lower case according to any locale-specific case mappings. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page.\nUnlike other methods that use the locales argument, toLocaleLowerCase() does not allow locale matching. Therefore, after checking the validity of the locales argument, toLocaleLowerCase() always uses the first locale in the list (or the default locale if the list is empty), even if this locale is not supported by the implementation."
      }
    ]
  },
  {
    "name": "String.prototype.toLocaleUpperCase()",
    "description": "The characters within a string are converted to uppercase while respecting the\n      current locale.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase",
    "return_value": "A new string representing the calling string converted to upper case, according to any\n  locale-specific case mappings.",
    "parameters": [
      {
        "name": "locales",
        "optional": true,
        "description": "A string with a BCP 47 language tag, or an array of such strings. Indicates the locale to be used to convert to upper case according to any locale-specific case mappings. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page.\nUnlike other methods that use the locales argument, toLocaleUpperCase() does not allow locale matching. Therefore, after checking the validity of the locales argument, toLocaleUpperCase() always uses the first locale in the list (or the default locale if the list is empty), even if this locale is not supported by the implementation."
      }
    ]
  },
  {
    "name": "String.prototype.toLowerCase()",
    "description": "Returns the calling string value converted to lowercase.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase",
    "return_value": "A new string representing the calling string converted to lower case.",
    "parameters": []
  },
  {
    "name": "String.prototype.toString()",
    "description": "Returns a string representing the specified object. Overrides the\n      Object.prototype.toString() method.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString",
    "return_value": "A string representing the specified string value.",
    "parameters": []
  },
  {
    "name": "String.prototype.toUpperCase()",
    "description": "Returns the calling string value converted to uppercase.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase",
    "return_value": "A new string representing the calling string converted to upper case.",
    "parameters": []
  },
  {
    "name": "String.prototype.toWellFormed()",
    "description": "Returns a string where all lone surrogates of this string are replaced with the Unicode replacement character U+FFFD.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toWellFormed",
    "return_value": "A new string that is a copy of this string, with all lone surrogates replaced with the Unicode replacement character U+FFFD. If str is well formed, a new string is still returned (essentially a copy of str).",
    "parameters": []
  },
  {
    "name": "String.prototype.trim()",
    "description": "Trims whitespace from the beginning and end of the string.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim",
    "return_value": "A new string representing str stripped of whitespace from both its beginning and end. Whitespace is defined as white space characters plus line terminators.\nIf neither the beginning or end of str has any whitespace, a new string is still returned (essentially a copy of str).",
    "parameters": []
  },
  {
    "name": "String.prototype.trimEnd()",
    "description": "Trims whitespace from the end of the string.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd",
    "return_value": "A new string representing str stripped of whitespace from its end (right side). Whitespace is defined as white space characters plus line terminators.\nIf the end of str has no whitespace, a new string is still returned (essentially a copy of str).",
    "parameters": []
  },
  {
    "name": "String.prototype.trimStart()",
    "description": "Trims whitespace from the beginning of the string.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart",
    "return_value": "A new string representing str stripped of whitespace from its beginning (left side). Whitespace is defined as white space characters plus line terminators.\nIf the beginning of str has no whitespace, a new string is still returned (essentially a copy of str).",
    "parameters": []
  },
  {
    "name": "String.prototype.valueOf()",
    "description": "Returns the primitive value of the specified object. Overrides the\n      Object.prototype.valueOf() method.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf",
    "return_value": "A string representing the primitive value of a given String object.",
    "parameters": []
  },
  {
    "name": "String.prototype[@@iterator]()",
    "description": "Returns a new iterator object that iterates over the code points of a String value,\n      returning each code point as a String value.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator",
    "return_value": "A new iterable iterator object that yields the Unicode code points of the string value as individual strings.",
    "parameters": []
  },
  {
    "name": "String.prototype.anchor()",
    "description": "<a name=\"name\"> (hypertext target)",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor",
    "return_value": "A string beginning with an <a name=\"name\"> start tag (double quotes in name are replaced with &quot;), then the text str, and then an </a> end tag.",
    "parameters": [
      {
        "name": "name",
        "optional": false,
        "description": "A string representing a name value to put into the generated <a name=\"...\"> start tag."
      }
    ]
  },
  {
    "name": "String.prototype.blink()",
    "description": "<blink>",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink",
    "return_value": "A string beginning with a <blink> start tag, then the text str, and then a </blink> end tag.",
    "parameters": []
  },
  {
    "name": "String.prototype.fontcolor()",
    "description": "<font color=\"color\">",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor",
    "return_value": "A string beginning with a <font color=\"color\"> start tag (double quotes in color are replaced with &quot;), then the text str, and then a </font> end tag.",
    "parameters": [
      {
        "name": "color",
        "optional": false,
        "description": "A string expressing the color as a hexadecimal RGB triplet or as a string literal. String literals for color names are listed in the CSS color reference."
      }
    ]
  },
  {
    "name": "String.prototype.fontsize()",
    "description": "<font size=\"size\">",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize",
    "return_value": "A string beginning with a <font size=\"size\"> start tag (double quotes in size are replaced with &quot;), then the text str, and then a </font> end tag.",
    "parameters": [
      {
        "name": "size",
        "optional": false,
        "description": "An integer between 1 and 7, or a string representing a signed integer between 1 and 7."
      }
    ]
  },
  {
    "name": "String.prototype.link()",
    "description": "<a href=\"url\"> (link to URL)",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link",
    "return_value": "A string beginning with an <a href=\"url\"> start tag (double quotes in url are replaced with &quot;), then the text str, and then an </a> end tag.",
    "parameters": [
      {
        "name": "url",
        "optional": false,
        "description": "Any string that specifies the href attribute of the <a> element; it should be a valid URL (relative or absolute), with any & characters escaped as &amp;."
      }
    ]
  }
]
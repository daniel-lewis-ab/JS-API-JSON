[
  {
    "name": "Intl.Collator()",
    "description": "Creates a new Collator object.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator",
    "parameters": [
      {
        "name": "locales",
        "optional": true,
        "description": "A string with a BCP 47 language tag or an Intl.Locale instance, or an array of such locale identifiers. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page.\nThe following Unicode extension keys are allowed:\n\nco\n\nSee collation.\n\nkn\n\nSee numeric.\n\nkf\n\nSee caseFirst.\n\n\nThese keys can also be set with options (as listed below). When both are set, the options property takes precedence."
      },
      {
        "name": "co",
        "optional": false,
        "description": "See collation."
      },
      {
        "name": "kn",
        "optional": false,
        "description": "See numeric."
      },
      {
        "name": "kf",
        "optional": false,
        "description": "See caseFirst."
      },
      {
        "name": "options",
        "optional": true,
        "description": "An object containing the following properties, in the order they are retrieved (all of them are optional):\n\nusage\n\nWhether the comparison is for sorting a list of strings or fuzzy (for the Latin script diacritic-insensitive and case-insensitive) filtering a list of strings by key. Possible values are:\n\n\"sort\" (default)\n\nFor sorting a list of strings.\n\n\"search\"\n\nFor filtering a list of strings by testing each list item for a full-string match against a key. With \"search\", the caller should only pay attention to whether compare() returns zero or non-zero and should not distinguish the non-zero return values from each other. That is, it is inappropriate to use \"search\" for sorting/ordering.\n\n\n\nlocaleMatcher\n\nThe locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see Locale identification and negotiation.\n\ncollation\n\nVariant collations for certain locales, such as \"emoji\", \"pinyin\", \"stroke\", and so on. For a list of supported collation types, see Intl.Locale.prototype.getCollations(); the default is \"default\". This option can also be set through the co Unicode extension key; if both are provided, this options property takes precedence.\n\nnumeric\n\nWhether numeric collation should be used, such that \"1\" < \"2\" < \"10\". Possible values are true and false; the default is false. This option can also be set through the kn Unicode extension key; if both are provided, this options property takes precedence.\n\ncaseFirst\n\nWhether upper case or lower case should sort first. Possible values are \"upper\", \"lower\", and \"false\" (use the locale's default); the default is \"false\". This option can also be set through the kf Unicode extension key; if both are provided, this options property takes precedence.\n\nsensitivity\n\nWhich differences in the strings should lead to non-zero result values. Possible values are:\n\n\"base\"\n\nOnly strings that differ in base letters compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a = \u00c3\u00a1, a = A.\n\n\"accent\"\n\nOnly strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a \u00e2\u0089\u00a0 \u00c3\u00a1, a = A.\n\n\"case\"\n\nOnly strings that differ in base letters or case compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a = \u00c3\u00a1, a \u00e2\u0089\u00a0 A.\n\n\"variant\"\n\nStrings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a \u00e2\u0089\u00a0 b, a \u00e2\u0089\u00a0 \u00c3\u00a1, a \u00e2\u0089\u00a0 A.\n\n\nThe default is \"variant\" for usage \"sort\"; it's locale dependent for usage \"search\" per spec, but the core functionality of \"search\" is accent-insensitive and case-insensitive filtering, so \"base\" makes the most sense (and perhaps \"case\").\n\nignorePunctuation\n\nWhether punctuation should be ignored. Possible values are true and false; the default is false."
      },
      {
        "name": "usage",
        "optional": false,
        "description": "Whether the comparison is for sorting a list of strings or fuzzy (for the Latin script diacritic-insensitive and case-insensitive) filtering a list of strings by key. Possible values are:\n\n\"sort\" (default)\n\nFor sorting a list of strings.\n\n\"search\"\n\nFor filtering a list of strings by testing each list item for a full-string match against a key. With \"search\", the caller should only pay attention to whether compare() returns zero or non-zero and should not distinguish the non-zero return values from each other. That is, it is inappropriate to use \"search\" for sorting/ordering."
      },
      {
        "name": "\"sort\"",
        "optional": false,
        "description": "For sorting a list of strings."
      },
      {
        "name": "\"search\"",
        "optional": false,
        "description": "For filtering a list of strings by testing each list item for a full-string match against a key. With \"search\", the caller should only pay attention to whether compare() returns zero or non-zero and should not distinguish the non-zero return values from each other. That is, it is inappropriate to use \"search\" for sorting/ordering."
      },
      {
        "name": "localeMatcher",
        "optional": false,
        "description": "The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see Locale identification and negotiation."
      },
      {
        "name": "collation",
        "optional": false,
        "description": "Variant collations for certain locales, such as \"emoji\", \"pinyin\", \"stroke\", and so on. For a list of supported collation types, see Intl.Locale.prototype.getCollations(); the default is \"default\". This option can also be set through the co Unicode extension key; if both are provided, this options property takes precedence."
      },
      {
        "name": "numeric",
        "optional": false,
        "description": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". Possible values are true and false; the default is false. This option can also be set through the kn Unicode extension key; if both are provided, this options property takes precedence."
      },
      {
        "name": "caseFirst",
        "optional": false,
        "description": "Whether upper case or lower case should sort first. Possible values are \"upper\", \"lower\", and \"false\" (use the locale's default); the default is \"false\". This option can also be set through the kf Unicode extension key; if both are provided, this options property takes precedence."
      },
      {
        "name": "sensitivity",
        "optional": false,
        "description": "Which differences in the strings should lead to non-zero result values. Possible values are:\n\n\"base\"\n\nOnly strings that differ in base letters compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a = \u00c3\u00a1, a = A.\n\n\"accent\"\n\nOnly strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a \u00e2\u0089\u00a0 \u00c3\u00a1, a = A.\n\n\"case\"\n\nOnly strings that differ in base letters or case compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a = \u00c3\u00a1, a \u00e2\u0089\u00a0 A.\n\n\"variant\"\n\nStrings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a \u00e2\u0089\u00a0 b, a \u00e2\u0089\u00a0 \u00c3\u00a1, a \u00e2\u0089\u00a0 A.\n\n\nThe default is \"variant\" for usage \"sort\"; it's locale dependent for usage \"search\" per spec, but the core functionality of \"search\" is accent-insensitive and case-insensitive filtering, so \"base\" makes the most sense (and perhaps \"case\")."
      },
      {
        "name": "\"base\"",
        "optional": false,
        "description": "Only strings that differ in base letters compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a = \u00c3\u00a1, a = A."
      },
      {
        "name": "\"accent\"",
        "optional": false,
        "description": "Only strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a \u00e2\u0089\u00a0 \u00c3\u00a1, a = A."
      },
      {
        "name": "\"case\"",
        "optional": false,
        "description": "Only strings that differ in base letters or case compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a = \u00c3\u00a1, a \u00e2\u0089\u00a0 A."
      },
      {
        "name": "\"variant\"",
        "optional": false,
        "description": "Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a \u00e2\u0089\u00a0 b, a \u00e2\u0089\u00a0 \u00c3\u00a1, a \u00e2\u0089\u00a0 A."
      },
      {
        "name": "ignorePunctuation",
        "optional": false,
        "description": "Whether punctuation should be ignored. Possible values are true and false; the default is false."
      },
      {
        "name": "RangeError",
        "optional": false,
        "description": "Thrown if locales or options contain invalid values."
      }
    ]
  },
  {
    "name": "Intl.Collator.supportedLocalesOf()",
    "description": "Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/supportedLocalesOf",
    "return_value": "An array of strings representing a subset of the given locale tags that are supported in collation without having to fall back to the runtime's default locale.",
    "parameters": [
      {
        "name": "locales",
        "optional": false,
        "description": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page."
      },
      {
        "name": "options",
        "optional": true,
        "description": "An object that may have the following property:\n\nlocaleMatcher\n\nThe locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see the Intl page."
      },
      {
        "name": "localeMatcher",
        "optional": false,
        "description": "The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see the Intl page."
      }
    ]
  },
  {
    "name": "Intl.Collator.prototype.constructor",
    "description": "The constructor function that created the instance object. For Intl.Collator instances, the initial value is the Intl.Collator constructor.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor",
    "parameters": []
  },
  {
    "name": "Intl.Collator.prototype[@@toStringTag]",
    "description": "The initial value of the @@toStringTag property is the string \"Intl.Collator\". This property is used in Object.prototype.toString().",
    "link": "https://developer.mozilla.org/#intl.collator.prototypetostringtag",
    "parameters": []
  },
  {
    "name": "Intl.Collator.prototype.compare()",
    "description": "Getter function that compares two strings according to the sort order of this Intl.Collator object.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/compare",
    "return_value": "A number indicating how string1 and string2 compare to each other according to the sort order of this Intl.Collator object:\n\nA negative value if string1 comes before string2;\nA positive value if string1 comes after string2;\n0 if they are considered equal.",
    "parameters": [
      {
        "name": "string1",
        "optional": false,
        "description": "The strings to compare against each other."
      }
    ]
  },
  {
    "name": "Intl.Collator.prototype.resolvedOptions()",
    "description": "Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.",
    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/resolvedOptions",
    "return_value": "A new object with properties reflecting the locale and collation options computed\n  during the initialization of the given Intl.Collator object.",
    "parameters": [
      {
        "name": "locale",
        "optional": false,
        "description": "The BCP 47 language tag for the locale actually used. If any Unicode extension\n      values were requested in the input BCP 47 language tag that led to this locale,\n      the key-value pairs that were requested and are supported for this locale are\n      included in locale."
      },
      {
        "name": "usage",
        "optional": false,
        "description": "The values provided for these properties in the options argument or\n      filled in as defaults."
      },
      {
        "name": "collation",
        "optional": false,
        "description": "The value requested using the Unicode extension key \"co\", if it is\n      supported for locale, or \"default\"."
      },
      {
        "name": "numeric",
        "optional": false,
        "description": "The values requested for these properties in the options argument or\n      using the Unicode extension keys \"kn\" and \"kf\" or filled\n      in as defaults. If the implementation does not support these properties, they are\n      omitted."
      }
    ]
  }
]